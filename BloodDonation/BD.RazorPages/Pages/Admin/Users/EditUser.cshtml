@page "/admin/users/edit/{id:int}"
@model BD.RazorPages.Pages.Admin.Users.EditUserModel
@{
    ViewData["Title"] = "Edit User";
}

@if (TempData["Success"] != null)
{
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
        <span class="block sm:inline">@TempData["Success"]</span>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
        <span class="block sm:inline">@TempData["Error"]</span>
    </div>
}

<div class="max-w-4xl mx-auto">
    <!-- Page Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <div class="flex items-center justify-between">
            <div>
                <h2 class="text-3xl font-bold text-gray-900 mb-2">Edit User</h2>
                <p class="text-gray-600">Update user information and settings</p>
            </div>
            <div class="flex space-x-3">
                <a href="/Admin/Users" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <i class="fas fa-arrow-left mr-2"></i>Back to Users
                </a>
            </div>
        </div>
    </div>

    <!-- Edit User Form -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <form method="post" class="space-y-6">
            <input type="hidden" asp-for="UserId" />
            
            <!-- Personal Information Section -->
            <div>
                <h3 class="text-lg font-medium text-gray-900 mb-4">Personal Information</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label asp-for="Name" class="block text-sm font-medium text-gray-700 mb-2">Full Name *</label>
                        <input asp-for="Name" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500" />
                        <span asp-validation-for="Name" class="text-red-600 text-sm"></span>
                    </div>
                    
                    <div>
                        <label asp-for="Email" class="block text-sm font-medium text-gray-700 mb-2">Email Address *</label>
                        <input asp-for="Email" type="email" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500" />
                        <span asp-validation-for="Email" class="text-red-600 text-sm"></span>
                    </div>
                    
                    <div>
                        <label asp-for="Phone" class="block text-sm font-medium text-gray-700 mb-2">Phone Number *</label>
                        <input asp-for="Phone" type="tel" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500" />
                        <span asp-validation-for="Phone" class="text-red-600 text-sm"></span>
                    </div>
                    
                    <div>
                        <label asp-for="BloodType" class="block text-sm font-medium text-gray-700 mb-2">Blood Type *</label>
                        <select asp-for="BloodType" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500">
                            <option value="">Select Blood Type</option>
                            <option value="A+">A+</option>
                            <option value="A-">A-</option>
                            <option value="B+">B+</option>
                            <option value="B-">B-</option>
                            <option value="AB+">AB+</option>
                            <option value="AB-">AB-</option>
                            <option value="O+">O+</option>
                            <option value="O-">O-</option>
                        </select>
                        <span asp-validation-for="BloodType" class="text-red-600 text-sm"></span>
                    </div>
                </div>
                
                <div class="mt-6">
                    <label asp-for="Address" class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                    <textarea asp-for="Address" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500" placeholder="Enter complete address (optional)"></textarea>
                    <span asp-validation-for="Address" class="text-red-600 text-sm"></span>
                </div>
            </div>

            <!-- Account Settings Section -->
            <div class="border-t border-gray-200 pt-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Account Settings</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label asp-for="RoleId" class="block text-sm font-medium text-gray-700 mb-2">Role *</label>
                        <select asp-for="RoleId" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500">
                            <option value="">Select Role</option>
                            @foreach (var role in Model.AllRoles)
                            {
                                <option value="@role.RoleId">@role.Name</option>
                            }
                        </select>
                        <span asp-validation-for="RoleId" class="text-red-600 text-sm"></span>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Account Status</label>
                        <div class="flex items-center space-x-4">
                            <label class="inline-flex items-center">
                                <input type="radio" asp-for="IsDeleted" value="false" class="form-radio text-red-600" />
                                <span class="ml-2 text-sm text-gray-700">Active</span>
                            </label>
                            <label class="inline-flex items-center">
                                <input type="radio" asp-for="IsDeleted" value="true" class="form-radio text-red-600" />
                                <span class="ml-2 text-sm text-gray-700">Inactive</span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Password Change Section -->
            <div class="border-t border-gray-200 pt-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Change Password</h3>
                <p class="text-sm text-gray-600 mb-4">Leave blank to keep current password</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label asp-for="NewPassword" class="block text-sm font-medium text-gray-700 mb-2">New Password</label>
                        <input asp-for="NewPassword" type="password" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500" />
                        <span asp-validation-for="NewPassword" class="text-red-600 text-sm"></span>
                    </div>
                    
                    <div>
                        <label asp-for="ConfirmPassword" class="block text-sm font-medium text-gray-700 mb-2">Confirm New Password</label>
                        <input asp-for="ConfirmPassword" type="password" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500" />
                        <span asp-validation-for="ConfirmPassword" class="text-red-600 text-sm"></span>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="border-t border-gray-200 pt-6">
                <div class="flex items-center justify-between">
                    <div class="text-sm text-gray-500">
                        <i class="fas fa-info-circle mr-1"></i>
                        Fields marked with * are required
                    </div>
                    <div class="flex space-x-3">
                        <a href="/Admin/Users" 
                           class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                            Cancel
                        </a>
                        <button type="submit" 
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            <i class="fas fa-save mr-2"></i>
                            Update User
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        // Client-side validation enhancements
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const nameInput = document.querySelector('input[name="Name"]');
            const emailInput = document.querySelector('input[name="Email"]');
            const phoneInput = document.querySelector('input[name="Phone"]');
            const passwordInput = document.querySelector('input[name="NewPassword"]');
            const confirmPasswordInput = document.querySelector('input[name="ConfirmPassword"]');

            // Real-time validation for name
            nameInput?.addEventListener('blur', function() {
                if (this.value.trim() && /^\d+$/.test(this.value.trim())) {
                    this.classList.add('border-red-500');
                    showError(this, 'Name cannot contain only numbers');
                } else {
                    this.classList.remove('border-red-500');
                    hideError(this);
                }
            });

            // Real-time validation for email
            emailInput?.addEventListener('blur', function() {
                const email = this.value.trim();
                if (email && (email.startsWith('.') || email.endsWith('.') || email.includes('..'))) {
                    this.classList.add('border-red-500');
                    showError(this, 'Please enter a valid email address');
                } else {
                    this.classList.remove('border-red-500');
                    hideError(this);
                }
            });

            // Real-time validation for phone
            phoneInput?.addEventListener('blur', function() {
                const phoneDigits = this.value.replace(/\D/g, '');
                if (this.value.trim() && (phoneDigits.length < 10 || phoneDigits.length > 15)) {
                    this.classList.add('border-red-500');
                    showError(this, 'Phone number must contain 10-15 digits');
                } else {
                    this.classList.remove('border-red-500');
                    hideError(this);
                }
            });

            // Password confirmation validation
            function validatePasswordMatch() {
                if (passwordInput?.value && confirmPasswordInput?.value) {
                    if (passwordInput.value !== confirmPasswordInput.value) {
                        confirmPasswordInput.classList.add('border-red-500');
                        showError(confirmPasswordInput, 'Passwords do not match');
                    } else {
                        confirmPasswordInput.classList.remove('border-red-500');
                        hideError(confirmPasswordInput);
                    }
                }
            }

            passwordInput?.addEventListener('blur', validatePasswordMatch);
            confirmPasswordInput?.addEventListener('blur', validatePasswordMatch);

            function showError(input, message) {
                hideError(input);
                const errorSpan = document.createElement('span');
                errorSpan.className = 'text-red-600 text-sm validation-error';
                errorSpan.textContent = message;
                input.parentNode.appendChild(errorSpan);
            }

            function hideError(input) {
                const existingError = input.parentNode.querySelector('.validation-error');
                if (existingError) {
                    existingError.remove();
                }
            }
        });
    </script>
}

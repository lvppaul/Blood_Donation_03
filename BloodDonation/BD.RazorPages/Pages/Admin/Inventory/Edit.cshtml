@page "/admin/inventory/edit/{id:int?}"
@model BD.RazorPages.Pages.Admin.Inventory.EditModel
@{
    ViewData["Title"] = "Edit Blood Inventory";
    
    // Define styling classes similar to other pages
    var statusClasses = new Dictionary<string, string>
    {
        { "Available", "bg-green-100 text-green-800" },
        { "Reserved", "bg-blue-100 text-blue-800" },
        { "Expired", "bg-red-100 text-red-800" },
        { "Low Stock", "bg-yellow-100 text-yellow-800" },
        { "Out of Stock", "bg-gray-200 text-gray-800" }
    };
    
    var componentClasses = new Dictionary<string, string>
    {
        { "Red Blood Cells", "bg-red-100 text-red-800" },
        { "White Blood Cells", "bg-indigo-100 text-indigo-800" },
        { "Plasma", "bg-yellow-100 text-yellow-800" },
        { "Platelets", "bg-green-100 text-green-800" }
    };
    
    var bloodTypeClasses = new Dictionary<string, string>
    {
        { "O+",  "bg-red-100 text-red-800" },
        { "A+",  "bg-blue-100 text-blue-800" },
        { "B+",  "bg-green-100 text-green-800" },
        { "AB+", "bg-yellow-100 text-yellow-800" },
        { "O-",  "bg-gray-100 text-gray-800" },
        { "A-",  "bg-blue-100 text-blue-800" },
        { "B-",  "bg-yellow-100 text-yellow-800" },
        { "AB-", "bg-green-100 text-green-800" }
    };
    
    var defaultClass = "bg-gray-200 text-gray-500";
}

@* Success Message *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="bg-green-50 border border-green-200 rounded-md p-4 mb-6">
        <div class="flex items-center">
            <div class="flex-shrink-0">
                <i class="fas fa-check-circle text-green-400 text-lg"></i>
            </div>
            <div class="ml-3">
                <div class="text-sm">
                    <p class="font-medium text-green-800">@TempData["SuccessMessage"]</p>
                </div>
            </div>
            <div class="ml-auto pl-3">
                <div class="-mx-1.5 -my-1.5">
                    <button type="button" onclick="this.closest('.bg-green-50').remove()" class="inline-flex bg-green-50 rounded-md p-1.5 text-green-500 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-green-50 focus:ring-green-600">
                        <span class="sr-only">Dismiss</span>
                        <i class="fas fa-times text-sm"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@* Error Message *@
@if (TempData["ErrorMessage"] != null)
{
    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
        <div class="flex items-center">
            <div class="flex-shrink-0">
                <i class="fas fa-exclamation-circle text-red-400 text-lg"></i>
            </div>
            <div class="ml-3">
                <div class="text-sm">
                    <p class="font-medium text-red-800">@TempData["ErrorMessage"]</p>
                </div>
            </div>
            <div class="ml-auto pl-3">
                <div class="-mx-1.5 -my-1.5">
                    <button type="button" onclick="this.closest('.bg-red-50').remove()" class="inline-flex bg-red-50 rounded-md p-1.5 text-red-500 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-red-50 focus:ring-red-600">
                        <span class="sr-only">Dismiss</span>
                        <i class="fas fa-times text-sm"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<div class="max-w-6xl mx-auto space-y-6">
    <!-- Page Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
                <div class="flex-shrink-0">
                    <div class="w-16 h-16 @(bloodTypeClasses.GetValueOrDefault(Model.BloodType, defaultClass)) rounded-full flex items-center justify-center">
                        <span class="text-xl font-bold">@(Model.BloodType ?? "?")</span>
                    </div>
                </div>
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Edit Blood Unit #@Model.InventoryId</h1>
                    <p class="text-gray-600">Modify blood inventory information</p>
                </div>
            </div>
            <div class="flex space-x-3">
                <a asp-page="./Details" asp-route-id="@Model.InventoryId" 
                   class="inline-flex items-center px-4 py-2 border border-blue-300 rounded-md shadow-sm text-sm font-medium text-blue-700 bg-blue-50 hover:bg-blue-100">
                    <i class="fas fa-eye mr-2"></i>View Details
                </a>
                <a asp-page="./BloodUnits" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <i class="fas fa-arrow-left mr-2"></i>Back to Inventory
                </a>
            </div>
        </div>
    </div>

    <!-- Main Edit Form -->
    <form method="post" class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <input type="hidden" asp-for="InventoryId" />
        
        <!-- Left Column - Main Form -->
        <div class="lg:col-span-2 space-y-6">
            <!-- Basic Information Card -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                    <i class="fas fa-edit text-blue-500 mr-2"></i>
                    Basic Information
                </h3>
                
                <!-- Validation Summary -->
                <div asp-validation-summary="ModelOnly" class="bg-red-50 border border-red-200 rounded-md p-4 mb-6 text-red-800"></div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Blood Type -->
                    <div>
                        <label asp-for="BloodType" class="block text-sm font-medium text-gray-700 mb-2">
                            Blood Type <span class="text-red-500">*</span>
                        </label>
                        <select asp-for="BloodType" asp-items="Model.BloodTypes" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors">
                        </select>
                        <span asp-validation-for="BloodType" class="text-red-600 text-sm"></span>
                    </div>

                    <!-- Component Type -->
                    <div>
                        <label asp-for="ComponentType" class="block text-sm font-medium text-gray-700 mb-2">
                            Component Type <span class="text-red-500">*</span>
                        </label>
                        <select asp-for="ComponentType" asp-items="Model.ComponentTypes" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors">
                        </select>
                        <span asp-validation-for="ComponentType" class="text-red-600 text-sm"></span>
                    </div>

                    <!-- Amount -->
                    <div>
                        <label asp-for="Amount" class="block text-sm font-medium text-gray-700 mb-2">
                            Amount (Units) <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <input asp-for="Amount" type="number" min="1" max="10000" 
                                   class="w-full px-3 py-2 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors" 
                                   placeholder="Enter amount">
                            <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                <span class="text-gray-500 text-sm">units</span>
                            </div>
                        </div>
                        <span asp-validation-for="Amount" class="text-red-600 text-sm"></span>
                        <p class="text-sm text-gray-500 mt-1">Range: 1 to 10,000 units</p>
                    </div>

                    <!-- Expiry Date -->
                    <div>
                        <label asp-for="ExpiredDate" class="block text-sm font-medium text-gray-700 mb-2">
                            Expiry Date <span class="text-red-500">*</span>
                        </label>
                        <input asp-for="ExpiredDate" type="date" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors">
                        <span asp-validation-for="ExpiredDate" class="text-red-600 text-sm"></span>
                        <p class="text-sm text-gray-500 mt-1">Must be a future date</p>
                    </div>
                </div>
            </div>

            <!-- Facility and Status Card -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-6 flex items-center">
                    <i class="fas fa-hospital text-green-500 mr-2"></i>
                    Facility & Status
                </h3>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Medical Facility -->
                    <div>
                        <label asp-for="FacilityId" class="block text-sm font-medium text-gray-700 mb-2">
                            Medical Facility <span class="text-red-500">*</span>
                        </label>
                        <select asp-for="FacilityId" asp-items="Model.MedicalFacilities" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors">
                        </select>
                        <span asp-validation-for="FacilityId" class="text-red-600 text-sm"></span>
                    </div>

                    <!-- Status -->
                    <div>
                        <label asp-for="StatusInventoryId" class="block text-sm font-medium text-gray-700 mb-2">
                            Status <span class="text-red-500">*</span>
                        </label>
                        <select asp-for="StatusInventoryId" asp-items="Model.StatusBloodInventories" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors">
                        </select>
                        <span asp-validation-for="StatusInventoryId" class="text-red-600 text-sm"></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Information & Actions -->
        <div class="space-y-6">
            <!-- Changes Preview -->
            @if (Model.OriginalInventory != null && Model.GetChangesSummary().Any())
            {
                <div class="bg-blue-50 rounded-lg border border-blue-200 p-6">
                    <h3 class="text-lg font-semibold text-blue-900 mb-4 flex items-center">
                        <i class="fas fa-list text-blue-500 mr-2"></i>
                        Changes Preview
                    </h3>
                    <ul class="space-y-2">
                        @foreach (var change in Model.GetChangesSummary())
                        {
                            <li class="text-sm text-blue-800 flex items-start">
                                <i class="fas fa-arrow-right text-blue-400 mr-2 mt-1"></i>
                                @change
                            </li>
                        }
                    </ul>
                </div>
            }

            <!-- Original Information Card -->
            @if (Model.OriginalInventory != null)
            {
                <div class="bg-gray-50 rounded-lg border border-gray-200 p-6">
                    <h3 class="text-lg font-semibold text-gray-700 mb-4 flex items-center">
                        <i class="fas fa-history text-gray-500 mr-2"></i>
                        Original Information
                    </h3>
                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span class="text-gray-600">Blood Type:</span>
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @(bloodTypeClasses.GetValueOrDefault(Model.OriginalInventory.BloodType, defaultClass))">
                                @Model.OriginalInventory.BloodType
                            </span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Component:</span>
                            <span class="text-gray-900">@Model.OriginalInventory.ComponentType</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Amount:</span>
                            <span class="text-gray-900 font-semibold">@Model.OriginalInventory.Amount units</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Facility:</span>
                            <span class="text-gray-900">@Model.OriginalInventory.Facility.Name</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Status:</span>
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @(statusClasses.GetValueOrDefault(Model.OriginalInventory.StatusBloodInventory.StatusName, defaultClass))">
                                @Model.OriginalInventory.StatusBloodInventory.StatusName
                            </span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Expires:</span>
                            <span class="text-gray-900">@Model.OriginalInventory.ExpiredDate.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                </div>
            }

            <!-- Form Actions -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <i class="fas fa-tools text-gray-500 mr-2"></i>
                    Actions
                </h3>
                <div class="space-y-3">
                    <button type="submit" 
                            class="w-full inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors">
                        <i class="fas fa-save mr-2"></i>Update Blood Inventory
                    </button>
                    <a asp-page="./Details" asp-route-id="@Model.InventoryId" 
                       class="w-full inline-flex items-center justify-center px-4 py-2 border border-blue-300 rounded-md shadow-sm text-sm font-medium text-blue-700 bg-blue-50 hover:bg-blue-100 transition-colors">
                        <i class="fas fa-eye mr-2"></i>View Details
                    </a>
                    <a asp-page="./BloodUnits" 
                       class="w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                        <i class="fas fa-times mr-2"></i>Cancel
                    </a>
                </div>
            </div>

            <!-- Help & Guidelines -->
            <div class="bg-indigo-50 rounded-lg border border-indigo-200 p-6">
                <h3 class="text-lg font-semibold text-indigo-900 mb-4 flex items-center">
                    <i class="fas fa-lightbulb text-indigo-500 mr-2"></i>
                    Guidelines
                </h3>
                <ul class="space-y-2 text-sm text-indigo-800">
                    <li class="flex items-start">
                        <i class="fas fa-check text-indigo-500 mr-2 mt-1"></i>
                        Expiry date must be in the future
                    </li>
                    <li class="flex items-start">
                        <i class="fas fa-check text-indigo-500 mr-2 mt-1"></i>
                        Amount should reflect actual units available
                    </li>
                    <li class="flex items-start">
                        <i class="fas fa-check text-indigo-500 mr-2 mt-1"></i>
                        Update status based on current condition
                    </li>
                    <li class="flex items-start">
                        <i class="fas fa-check text-indigo-500 mr-2 mt-1"></i>
                        Verify facility information is correct
                    </li>
                </ul>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum date for expiry date to today
            const expiryDateInput = document.querySelector('input[name="ExpiredDate"]');
            if (expiryDateInput) {
                const today = new Date().toISOString().split('T')[0];
                expiryDateInput.setAttribute('min', today);
            }

            // Real-time validation for expiry date
            if (expiryDateInput) {
                expiryDateInput.addEventListener('change', function() {
                    const selectedDate = new Date(this.value);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    if (selectedDate <= today) {
                        this.setCustomValidity('Expiry date must be in the future');
                        showFieldError(this, 'Expiry date must be in the future');
                    } else {
                        this.setCustomValidity('');
                        hideFieldError(this);
                    }
                });
            }

            // Real-time validation for amount
            const amountInput = document.querySelector('input[name="Amount"]');
            if (amountInput) {
                amountInput.addEventListener('blur', function() {
                    const amount = parseInt(this.value);
                    if (amount <= 0) {
                        showFieldError(this, 'Amount must be greater than 0');
                    } else if (amount > 10000) {
                        showFieldError(this, 'Amount cannot exceed 10,000 units');
                    } else {
                        hideFieldError(this);
                    }
                });
            }

            // Form submission validation
            const form = document.querySelector('form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    const submitButton = form.querySelector('button[type="submit"]');
                    
                    // Disable submit button to prevent double submission
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating...';
                    
                    // Re-enable button after 3 seconds in case of validation errors
                    setTimeout(() => {
                        submitButton.disabled = false;
                        submitButton.innerHTML = '<i class="fas fa-save mr-2"></i>Update Blood Inventory';
                    }, 3000);
                });
            }

            // Dynamic changes preview
            const formInputs = form.querySelectorAll('input, select');
            formInputs.forEach(input => {
                input.addEventListener('change', updateChangesPreview);
            });

            // Auto-hide notifications
            const notifications = document.querySelectorAll('.bg-green-50, .bg-red-50');
            notifications.forEach(function(notification) {
                setTimeout(function() {
                    if (notification && notification.parentNode) {
                        notification.style.transition = 'opacity 0.5s ease-out';
                        notification.style.opacity = '0';
                        setTimeout(function() {
                            if (notification.parentNode) {
                                notification.remove();
                            }
                        }, 500);
                    }
                }, 5000);
            });

            // Helper functions
            function showFieldError(field, message) {
                hideFieldError(field);
                field.classList.add('border-red-500');
                const errorSpan = document.createElement('span');
                errorSpan.className = 'text-red-600 text-sm field-error mt-1 block';
                errorSpan.textContent = message;
                field.parentNode.appendChild(errorSpan);
            }

            function hideFieldError(field) {
                field.classList.remove('border-red-500');
                const existingError = field.parentNode.querySelector('.field-error');
                if (existingError) {
                    existingError.remove();
                }
            }

            function updateChangesPreview() {
                // This would be implemented to show real-time changes
                // For now, we rely on server-side changes detection
            }

            // Add smooth animations to cards
            const cards = document.querySelectorAll('.bg-white, .bg-gray-50, .bg-blue-50, .bg-indigo-50');
            cards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });
        });
    </script>
}

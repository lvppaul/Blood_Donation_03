// <auto-generated />
using System;
using BD.Repositories.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BD.Repositories.Migrations
{
    [DbContext(typeof(BloodDonationDbContext))]
    partial class BloodDonationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BD.Repositories.Models.Entities.BlogPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<bool?>("IsDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Document");

                    b.Property<bool?>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_Published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PostId")
                        .HasName("PK__BlogPost__3ED7876681296E8D");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPost", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.BloodCompatibility", b =>
                {
                    b.Property<int>("CompatibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("compatibility_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompatibilityId"));

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("component_type");

                    b.Property<string>("DonorBloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("donor_blood_type");

                    b.Property<bool>("IsCompatible")
                        .HasColumnType("bit")
                        .HasColumnName("is_compatible");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("RecipientBloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("recipient_blood_type");

                    b.HasKey("CompatibilityId")
                        .HasName("PK__BloodCom__AA12AC9993C7D67D");

                    b.ToTable("BloodCompatibility", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.BloodInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("blood_type");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("component_type");

                    b.Property<DateOnly>("ExpiredDate")
                        .HasColumnType("date")
                        .HasColumnName("expired_date");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("facility_id");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StatusInventoryId")
                        .HasColumnType("int")
                        .HasColumnName("status_inventory_id");

                    b.HasKey("InventoryId")
                        .HasName("PK__BloodInv__B59ACC4921691C91");

                    b.HasIndex("FacilityId");

                    b.HasIndex("StatusInventoryId");

                    b.ToTable("BloodInventory", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.BloodRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("blood_type");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("component_type");

                    b.Property<DateTime?>("FulfilledDate")
                        .HasColumnType("datetime")
                        .HasColumnName("fulfilled_date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("request_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StatusRequestId")
                        .HasColumnType("int")
                        .HasColumnName("status_request_id");

                    b.Property<string>("UrgencyLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("urgency_level");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RequestId")
                        .HasName("PK__BloodReq__18D3B90F70C77E71");

                    b.HasIndex("StatusRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("BloodRequest", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.DonationHistory", b =>
                {
                    b.Property<int>("DonationId")
                        .HasColumnType("int")
                        .HasColumnName("donation_id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("blood_type");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("component_type");

                    b.Property<DateTime?>("DonationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("donation_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int")
                        .HasColumnName("facility_id");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("DonationId")
                        .HasName("PK__Donation__296B91DC2EA6D4FA");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("DonationHistory", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.DonorAvailability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("availability_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"));

                    b.Property<DateOnly>("AvailableDate")
                        .HasColumnType("date")
                        .HasColumnName("available_date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<DateOnly?>("LastDonationDate")
                        .HasColumnType("date")
                        .HasColumnName("last_donation_date");

                    b.Property<DateOnly?>("RecoveryReminderDate")
                        .HasColumnType("date")
                        .HasColumnName("recovery_reminder_date");

                    b.Property<int>("StatusDonorId")
                        .HasColumnType("int")
                        .HasColumnName("status_donor_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AvailabilityId")
                        .HasName("PK__DonorAva__86E3A801CD501914");

                    b.HasIndex("StatusDonorId");

                    b.HasIndex("UserId");

                    b.ToTable("DonorAvailability", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.MedicalFacility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("facility_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("FacilityId")
                        .HasName("PK__MedicalF__B2E8EAAE8DF9F91D");

                    b.ToTable("MedicalFacility", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StatusNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("status_notification_id");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842FFC2FEAB9");

                    b.HasIndex("StatusNotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__760965CC782C65DC");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusBloodDonor", b =>
                {
                    b.Property<int>("StatusDonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_donor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusDonorId"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusDonorId")
                        .HasName("PK__StatusBl__DEDAE0F7C8C78C25");

                    b.ToTable("StatusBloodDonor", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusBloodInventory", b =>
                {
                    b.Property<int>("StatusInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusInventoryId"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusInventoryId")
                        .HasName("PK__StatusBl__794D33277FCFC34E");

                    b.ToTable("StatusBloodInventory", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusBloodRequest", b =>
                {
                    b.Property<int>("StatusRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusRequestId"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusRequestId")
                        .HasName("PK__StatusBl__BB59962BCFC549EA");

                    b.ToTable("StatusBloodRequest", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusNotification", b =>
                {
                    b.Property<int>("StatusNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusNotificationId"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusNotificationId")
                        .HasName("PK__StatusNo__F90F86D594BE3DF0");

                    b.ToTable("StatusNotification", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("blood_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370F4FE76943");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.BlogPost", b =>
                {
                    b.HasOne("BD.Repositories.Models.Entities.User", "Author")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__BlogPost__author__00200768");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.BloodInventory", b =>
                {
                    b.HasOne("BD.Repositories.Models.Entities.MedicalFacility", "Facility")
                        .WithMany("BloodInventories")
                        .HasForeignKey("FacilityId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodInve__facil__797309D9");

                    b.HasOne("BD.Repositories.Models.Entities.StatusBloodInventory", "StatusInventory")
                        .WithMany("BloodInventories")
                        .HasForeignKey("StatusInventoryId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodInve__statu__7B5B524B");

                    b.Navigation("Facility");

                    b.Navigation("StatusInventory");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.BloodRequest", b =>
                {
                    b.HasOne("BD.Repositories.Models.Entities.StatusBloodRequest", "StatusRequest")
                        .WithMany("BloodRequests")
                        .HasForeignKey("StatusRequestId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodRequ__statu__60A75C0F");

                    b.HasOne("BD.Repositories.Models.Entities.User", "User")
                        .WithMany("BloodRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BloodRequ__user___5CD6CB2B");

                    b.Navigation("StatusRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.DonationHistory", b =>
                {
                    b.HasOne("BD.Repositories.Models.Entities.MedicalFacility", "Facility")
                        .WithMany("DonationHistories")
                        .HasForeignKey("FacilityId")
                        .IsRequired()
                        .HasConstraintName("FK__DonationH__facil__70DDC3D8");

                    b.HasOne("BD.Repositories.Models.Entities.BloodRequest", "Request")
                        .WithMany("DonationHistories")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__DonationH__reque__6FE99F9F");

                    b.HasOne("BD.Repositories.Models.Entities.User", "User")
                        .WithMany("DonationHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__DonationH__user___6EF57B66");

                    b.Navigation("Facility");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.DonorAvailability", b =>
                {
                    b.HasOne("BD.Repositories.Models.Entities.StatusBloodDonor", "StatusDonor")
                        .WithMany("DonorAvailabilities")
                        .HasForeignKey("StatusDonorId")
                        .IsRequired()
                        .HasConstraintName("FK__DonorAvai__statu__68487DD7");

                    b.HasOne("BD.Repositories.Models.Entities.User", "User")
                        .WithMany("DonorAvailabilities")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__DonorAvai__user___6754599E");

                    b.Navigation("StatusDonor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.Notification", b =>
                {
                    b.HasOne("BD.Repositories.Models.Entities.StatusNotification", "StatusNotification")
                        .WithMany("Notifications")
                        .HasForeignKey("StatusNotificationId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__statu__5629CD9C");

                    b.HasOne("BD.Repositories.Models.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__user___5441852A");

                    b.Navigation("StatusNotification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.User", b =>
                {
                    b.HasOne("BD.Repositories.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__role_id__4E88ABD4");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.BloodRequest", b =>
                {
                    b.Navigation("DonationHistories");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.MedicalFacility", b =>
                {
                    b.Navigation("BloodInventories");

                    b.Navigation("DonationHistories");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusBloodDonor", b =>
                {
                    b.Navigation("DonorAvailabilities");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusBloodInventory", b =>
                {
                    b.Navigation("BloodInventories");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusBloodRequest", b =>
                {
                    b.Navigation("BloodRequests");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.StatusNotification", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BD.Repositories.Models.Entities.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("BloodRequests");

                    b.Navigation("DonationHistories");

                    b.Navigation("DonorAvailabilities");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
